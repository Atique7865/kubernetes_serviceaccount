Absolutely! Here's a **complete step-by-step guide** from creating the namespace, ServiceAccount, Secret, Role, RoleBinding — to extracting credentials and creating a kubeconfig for that ServiceAccount.

---

# Step 1: Create Namespace `webapp`

Save as `namespace.yaml`:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: webapp
```

Apply:

```bash
kubectl apply -f namespace.yaml
```

---

# Step 2: Create ServiceAccount in `webapp`

Save as `serviceaccount.yaml`:

```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-sa-access
  namespace: webapp
automountServiceAccountToken: false
```

Apply:

```bash
kubectl apply -f serviceaccount.yaml
```

---

# Step 3: Create Secret for ServiceAccount token

Save as `secret.yaml`:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: nginx-sa-access-token
  namespace: webapp
  annotations:
    kubernetes.io/service-account.name: nginx-sa-access
type: kubernetes.io/service-account-token
```

Apply:

```bash
kubectl apply -f secret.yaml
```

---

# Step 4: Create Role with pod & service read permissions

Save as `role.yaml`:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-sa-role
  namespace: webapp
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch"]
```

Apply:

```bash
kubectl apply -f role.yaml
```

---

# Step 5: Create RoleBinding to bind Role to ServiceAccount

Save as `rolebinding.yaml`:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-sa-rolebinding
  namespace: webapp
subjects:
  - kind: ServiceAccount
    name: nginx-sa-access
    namespace: webapp
roleRef:
  kind: Role
  name: nginx-sa-role
  apiGroup: rbac.authorization.k8s.io
```

Apply:

```bash
kubectl apply -f rolebinding.yaml
```

---

# Step 6: Extract ServiceAccount token and CA certificate

Find the secret name linked to the ServiceAccount (if you want to double-check):

```bash
kubectl get serviceaccount nginx-sa-access -n webapp -o jsonpath='{.secrets[0].name}'
```

Extract token:

```bash
kubectl get secret nginx-sa-access-token -n webapp -o jsonpath="{.data.token}" | base64 --decode > token.txt
```

Extract CA cert:

```bash
kubectl get secret nginx-sa-access-token -n webapp -o jsonpath="{.data['ca\.crt']}" | base64 --decode > ca.crt
```

---

# Step 7: Get your Kubernetes API server URL

```bash
kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}'
```

Copy the output, e.g., `https://123.45.67.89:6443`

---

# Step 8: Create kubeconfig for this ServiceAccount

Run:

```bash
kubectl config set-cluster my-cluster \
  --server=https://YOUR_API_SERVER:6443 \
  --certificate-authority=ca.crt \
  --embed-certs=true
```

Replace `YOUR_API_SERVER` with the URL from Step 7 (without https\:// if you want, but kubectl accepts with https).

Set user credentials:

```bash
kubectl config set-credentials nginx-sa-user --token=$(cat token.txt)
```

Create a context:

```bash
kubectl config set-context nginx-sa-context --cluster=my-cluster --user=nginx-sa-user --namespace=webapp
```

Switch to this context:

```bash
kubectl config use-context nginx-sa-context
```

---

# Step 9: Test your access

Try listing pods with this context:

```bash
kubectl get pods -n webapp
```

You should see pods only if the Role allows it (which it does — `get, list, watch` on pods and services).

---

# Optional: Combine all YAML into one file (for convenience)

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: webapp
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-sa-access
  namespace: webapp
automountServiceAccountToken: false
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-sa-access-token
  namespace: webapp
  annotations:
    kubernetes.io/service-account.name: nginx-sa-access
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-sa-role
  namespace: webapp
rules:
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-sa-rolebinding
  namespace: webapp
subjects:
  - kind: ServiceAccount
    name: nginx-sa-access
    namespace: webapp
roleRef:
  kind: Role
  name: nginx-sa-role
  apiGroup: rbac.authorization.k8s.io
```

Save as `all-in-one.yaml` and apply with:

```bash
kubectl apply -f all-in-one.yaml
```

---

If you want me to help automate the kubeconfig creation or have any questions, just ask!
